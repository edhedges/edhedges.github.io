{"version":3,"sources":["webpack:///./src/templates/blogTemplate.js"],"names":["Template","_ref","data","markdownRemark","frontmatter","html","React","createElement","Layout","SEO","title","keywords","tags","style","padding","href","className","date","dangerouslySetInnerHTML","__html"],"mappings":"2FAAA,gGAKe,SAASA,EAAQC,GAE5B,IAF6B,KAC/BC,GACDD,EACC,MAAM,eAAEE,GAAmBD,GACrB,YAAEE,EAAW,KAAEC,GAASF,EAE9B,OACEG,IAAAC,cAACC,IAAM,KACLF,IAAAC,cAACE,IAAG,CAACC,MAAON,EAAYM,MAAOC,SAAUP,EAAYQ,OACrDN,IAAAC,cAAA,WACED,IAAAC,cAAA,WACED,IAAAC,cAAA,OAAKM,MAAO,CAAEC,QAAS,eAAgB,2CACGR,IAAAC,cAAA,KAAGQ,KAAK,SAAQ,YAAY,MAIxET,IAAAC,cAAA,OAAKS,UAAU,uBACbV,IAAAC,cAAA,OAAKS,UAAU,aACbV,IAAAC,cAAA,MAAIS,UAAU,mBAAmBZ,EAAYM,OAC7CJ,IAAAC,cAAA,MAAIS,UAAU,kBAAkBZ,EAAYa,MAC5CX,IAAAC,cAAA,OACES,UAAU,oBACVE,wBAAyB,CAAEC,OAAQd","file":"component---src-templates-blog-template-js-8b30035a72bc9c42bb86.js","sourcesContent":["import React from 'react'\nimport { graphql } from 'gatsby'\nimport Layout from '../components/layout'\nimport SEO from '../components/seo'\n\nexport default function Template({\n  data, // this prop will be injected by the GraphQL query below.\n}) {\n  const { markdownRemark } = data // data.markdownRemark holds our post data\n  const { frontmatter, html } = markdownRemark\n\n  return (\n    <Layout>\n      <SEO title={frontmatter.title} keywords={frontmatter.tags} />\n      <div>\n        <div>\n          <div style={{ padding: `0 0 2rem 0` }}>\n            Want to read more posts? Go back to the <a href=\"/blog\">archives</a>\n            .\n          </div>\n        </div>\n        <div className=\"blog-post-container\">\n          <div className=\"blog-post\">\n            <h1 className=\"blog-post-title\">{frontmatter.title}</h1>\n            <h2 className=\"blog-post-date\">{frontmatter.date}</h2>\n            <div\n              className=\"blog-post-content\"\n              dangerouslySetInnerHTML={{ __html: html }}\n            />\n          </div>\n        </div>\n      </div>\n    </Layout>\n  )\n}\n\nexport const pageQuery = graphql`\n  query($path: String!) {\n    markdownRemark(frontmatter: { path: { eq: $path } }) {\n      html\n      frontmatter {\n        date(formatString: \"MMMM DD, YYYY\")\n        path\n        title\n        tags\n      }\n    }\n  }\n`\n"],"sourceRoot":""}